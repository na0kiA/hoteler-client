"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _webpackConfig = require("../../webpack-config");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function pathToUrlPath(pathname) {
    let urlPath = pathname.replace(/^private-next-views-dir/, '');
    // For `views/layout.js`
    if (urlPath === '') {
        urlPath = '/';
    }
    return urlPath;
}
async function resolveLayoutPathsByPage({ pagePath , resolve  }) {
    const layoutPaths = new Map();
    const parts = pagePath.split('/');
    for(let i = 1; i < parts.length; i++){
        const pathWithoutSlashLayout = parts.slice(0, i).join('/');
        const layoutPath = `${pathWithoutSlashLayout}/layout`;
        const resolvedLayoutPath = await resolve(layoutPath);
        let urlPath = pathToUrlPath(pathWithoutSlashLayout);
        layoutPaths.set(urlPath, resolvedLayoutPath);
    }
    return layoutPaths;
}
const extensions = [
    ..._webpackConfig.NODE_RESOLVE_OPTIONS.extensions,
    ..._webpackConfig.NODE_RESOLVE_OPTIONS.extensions.map((ext)=>`.server${ext}`
    ),
    ..._webpackConfig.NODE_RESOLVE_OPTIONS.extensions.map((ext)=>`.client${ext}`
    ), 
];
const resolveOptions = {
    ..._webpackConfig.NODE_RESOLVE_OPTIONS,
    extensions
};
const nextViewLoader = async function nextViewLoader() {
    const loaderOptions = this.getOptions() || {};
    const resolve = this.getResolve(resolveOptions);
    const viewsDir = loaderOptions.viewsDir;
    const layoutPaths = await resolveLayoutPathsByPage({
        pagePath: loaderOptions.pagePath,
        resolve: async (pathname)=>{
            try {
                return await resolve(this.rootContext, pathname);
            } catch (err) {
                if (err.message.includes("Can't resolve")) {
                    return undefined;
                }
                throw err;
            }
        }
    });
    const componentsCode = [];
    for (const [layoutPath, resolvedLayoutPath] of layoutPaths){
        if (resolvedLayoutPath) {
            this.addDependency(resolvedLayoutPath);
            // use require so that we can bust the require cache
            const codeLine = `'${layoutPath}': () => require('${resolvedLayoutPath}')`;
            componentsCode.push(codeLine);
        } else {
            for (const ext of extensions){
                this.addMissingDependency(_path.default.join(viewsDir, layoutPath, `layout${ext}`));
            }
        }
    }
    // Add page itself to the list of components
    componentsCode.push(`'${pathToUrlPath(loaderOptions.pagePath).replace(new RegExp(`/page\\.+(${extensions.join('|')})$`), '')}': () => require('${loaderOptions.pagePath}')`);
    const result = `
    export const components = {
        ${componentsCode.join(',\n')}
    };
  `;
    return result;
};
var _default = nextViewLoader;
exports.default = _default;

//# sourceMappingURL=next-view-loader.js.map